#!/usr/bin/env nash

# vpn
fn vpn() {
	/usr/bin/sudo /usr/sbin/openvpn --cd $HOME+"/.config/openvpn" --config rohan.ovpn
}

bindfn vpn vpn

# nvim -> vim
fn vim(args...) {
	var expandedargs <= globerize($args...)

	/usr/bin/nvim $expandedargs
}

bindfn vim vim

# nvim -> vim
fn lsl(args...) {
	var expandedargs <= globerize($args...)

	ls $expandedargs
}

bindfn lsl lsl

# edit /etc/hosts alias
fn h() {
	/usr/bin/sudo /usr/bin/nvim /etc/hosts
}

bindfn h h

# pbpaste/pbcopy
fn pbpaste(args...) {
	var expandedargs <= globerize($args...)

	/usr/bin/xsel --clipboard --output $expandedargs
}

bindfn pbpaste pbpaste

fn pbcopy(args...) {
	var expandedargs <= globerize($args...)

	/usr/bin/xsel --clipboard --input $expandedargs
}

bindfn pbcopy pbcopy

# load virtualenv
#fn venv(){
#ias venv='v=".venv/bin/activate"; if [ -e ${v} ]; then source ${v} ]; else echo "virtualenv not found in current dir"; fi'
#}

# chcon docker
fn chcondocker(args...) {
	var expandedargs <= globerize($args...)

	/usr/bin/chcon -R -t svirt_sandbox_file_t $expandedargs
}

bindfn chcondocker chcondocker

# myip alias
fn myip(args...) {
	var type <= globerize($args...)

	fn _error(type, status, err) {
		print("Failed to get %s ip address. status[%s], error[%s]\n", $type, $status, $err)

		return
	}

	if $type == "public" {
		var ipaddress, status <= /usr/bin/curl https://ifconfig.co

		if $status == "0" {
			print("Public ip address: %s\n", $ipaddress)

			return
		} else {
			_error($type, $status, $ipaddress)
		}
	}
	if $type == "private" {
		var out, status <= (ip route show | grep default)

		if $status == "0" {
			var _out <= split($out, " ")

			var interface = $_out[4]
			var ipaddress = $_out[6]

			print("Interface: %s\nPrivate ip address: %s\n", $interface, $ipaddress)

			return
		} else {
			_error($type, $status, $out)
		}
	}

	print("Usage: myip [public|private]\n")
}

bindfn myip myip
